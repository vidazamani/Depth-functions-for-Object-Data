library(ICtest)
library(abind)
library(CovTools)
library(ggplot2)
library(dplyr)
library(purrr)
library(parallel)
library(dplyr)


# generate data function 

# A helper function
#
rsphere <- function(p, n, lambda){
  x <- matrix(rnorm(n*p, lambda, 1), n, p)
  x_norm <- apply(x, 1, function(v) sqrt(sum(v^2)))
  return(sweep(x, 1, x_norm, "/"))
}



cont_sample <- function(p, n, eps, lambda_1){
  n1 <- floor((1 - eps)*n)
  n2 <- n - n1
  
  x1 <- rsphere(p, n1, lambda_1)
  x2 <- rsphere(p, n2, -1)
  
  rbind(x1, x2)
  
}


source("C:/Users/vizama/Documents/1st paper/Box_Parallel/Codes/All Metric depth functions.R")



simulation_with_sph <- function(p, n, eps, lambda_1){
  
  
  # generate data
  many_S <- cont_sample(p, n, eps, lambda_1)
  
  # Compute the distance matrix between the corr matrices
  
  
  # Distance matrix
  suppressWarnings(D <- acos(tcrossprod(many_S)))
  diag(D) <- rep(0, nrow(D))
  
  
  
  
  ############## Running Time of each depth ###################
  
  start_time = Sys.time()
  DMHD <- MHD(D)
  end_time = Sys.time()
  MHDt <- end_time - start_time
  
  start_time = Sys.time()
  DMSD <- MSD(D)
  end_time = Sys.time()
  MSDt <- end_time - start_time
  
  
  start_time = Sys.time()
  DMLD <- MLD(D)
  end_time = Sys.time()
  MLDt <- end_time - start_time
  
  
  start_time = Sys.time()
  MOD2D <- MOD2(D)
  end_time = Sys.time()
  MOD2t <- end_time - start_time
  
  
  start_time = Sys.time()
  MOD3D <- MOD3(D)
  end_time = Sys.time()
  MOD3t <- end_time - start_time
  
  ###########################################
  
  ##### Computing Error #####
  
  MHDD = order(DMHD)[n] ; MSDD = order(DMSD)[n] 
  MLDD = order(DMLD)[n] ; MODD2 = order(MOD2D)[n]
  MODD3 = order(MOD3D)[n]
  
  
  tudeepest = many_S[MHDD,]
  spdeepest = many_S[MSDD,]
  lensdeepest = many_S[MLDD,]
  oja2deepest = many_S[MODD2,]
  oja3deepest = many_S[MODD3,]
  
  
  # Distance between two points
  
  tudiff1 = acos(sum(tudeepest*(1/sqrt(p)*rep(1,p))))
  
  
  spdiff1 = acos(sum(spdeepest*(1/sqrt(p)*rep(1,p))))
  
  
  lendiff1 = acos(sum(lensdeepest*(1/sqrt(p)*rep(1,p))))
  
  
  oja2diff1 = acos(sum(oja2deepest*(1/sqrt(p)*rep(1,p))))
  
  
  oja3diff1 = acos(sum(oja3deepest*(1/sqrt(p)*rep(1,p))))
  
  
  depths_error <- c(tudiff1, spdiff1, lendiff1, oja2diff1, oja3diff1)
  time_consumption <- c(MHDt,MSDt,MLDt,MOD2t,MOD3t)
  
  result <- data.frame(depths_error,time_consumption)
  return(result)
  
}


starttime <- Sys.time()



# Parameters

n <- c(10,20,30,40,50,60)
p = c(3, 5, 10)
eps = c(0.05, 0.30)
lambda_1 = 5




par_grid <- expand.grid(matrix_dimension = p,
                        sample_size = n,
                        outlier_rate = eps, 
                        mean = lambda_1)


par_n <- nrow(par_grid)


iter = 400
temp <- list()
output <- matrix(0)
a <- list()
b <- data.frame()
b_all <- data.frame()



cl <- makeCluster(4)
clusterExport(cl, ls(), envir = environment())
clusterExport(cl, c("rorth","abind", "CovDist"), envir = environment())


clusterEvalQ(cl, set.seed(2222))
set.seed(1111)
seed_vec <- sample(1:100000, iter)




for (j in 1:iter) {
  
  set.seed(seed_vec[j])
  
  temp <- parSapply(cl, 1:par_n, function(i) simulation_with_sph(par_grid$matrix_dimension[i],
                                                                 par_grid$sample_size[i],
                                                                 par_grid$outlier_rate[i],
                                                                 par_grid$mean[i]))
  
  output <- matrix(unlist(temp), ncol = 5, byrow = TRUE)
  
  a = lapply(1:5, function(i) data.frame(par_grid, 
                                         errorD = output[seq(1,2*length(n),2),i],
                                         howlong = output[seq(2,2*length(n),2),i],
                                         method = i))
  
  b = list_rbind(a)
  b_all <- rbind(b_all,b)
  
}





b_all$method <- factor(b_all$method, 1:5, c("Metric Half-space depth",
                                            "Metric Spatial depth",
                                            "Metric Lens depth",
                                            "Metric Oja depth 2D",
                                            "Metric Oja depth 3D"))

bagg = b_all %>% 
  group_by(method,mean,outlier_rate,matrix_dimension,sample_size) %>% 
  summarise(avg_error = mean(errorD), avg_time = mean(howlong))


write.table(bagg,
            file = "C:\\Users\\vizama\\Documents\\1st paper\\Simulation results on sphere dataset\\Singlefiledata\\wholedata")


stopCluster(cl)




endtime <- Sys.time()
duration <- endtime - starttime


# New facet label names for matrix dimension variable
mtd.labs <- c("p = 3", "p = 5", "p = 10")
names(mtd.labs) <- c(3, 5, 10)

# New facet label names for outlier rate variable
otl.labs <- c("Outlier rate = 5%", "Outlier rate = 30%")
names(otl.labs) <- c("0.05", "0.3")




plot = ggplot(bagg,aes(x = sample_size, y = avg_error, col = method))+ 
  facet_grid(matrix_dimension~outlier_rate,
             labeller = labeller(matrix_dimension = mtd.labs,
                                 outlier_rate = otl.labs))+
  geom_line(linewidth = 0.7)+
  scale_x_continuous(name="sample size")+
  theme_bw()+ 
  labs(title = "Performance of each Metric Depth Function", 
       subtitle = "when points on surface (P) and outlier rate increase")+ 
  theme(plot.title = element_text(size = 12), 
        plot.subtitle = element_text(size = 9))+
  scale_y_log10(name = 'Estimation error')




plot2 = ggplot(bagg,aes(x = sample_size, y = avg_time, col = method))+ 
  facet_grid(matrix_dimension~outlier_rate,
             labeller = labeller(matrix_dimension = mtd.labs,
                                 outlier_rate = otl.labs))+
  geom_line(linewidth = 0.7)+
  scale_y_log10(name = 'log of running time')+
  scale_x_continuous(name="sample size")+
  labs(title = 'Running time of each Metric Depth Function',
       subtitle = "when points on surface (P) and outlier rate increase")+
  theme(plot.title = element_text(size = 5))+
  theme_bw()





