#### Real example with Canadian weather data ####


##### All needed source and libraries ########
library(fda)
library(fda.usc) ### For computing distance
library(RColorBrewer)


source("C:/Users/vizama/Documents/1st paper/Box_Parallel/Codes/All Metric depth functions.R")


###################################################################################################
########## In this part we just want to show why this data can be divided to two groups ###########
# The full temperature data set from the Canadian weather data example
y <- CanadianWeather$dailyAv[, , 1]
my_basis <- create.fourier.basis(c(0, 365), 100)
ft <- Data2fd(1:365, y, my_basis)
ft_s <- smooth.fd(ft, fdPar(ft, 2, 1e4))

plot(ft_s,xlab = "Time (days)", ylab = "Average temperature",
     main = "Canadian Weather Data")


# Each of the weather stations belongs to one of four regions:
# Atlantic, Continental, Pacific, Arctic

region <- CanadianWeather$region


my_col <- brewer.pal(4, "Dark2")
plot(ft_s, col = my_col[factor(region)], lty = 1, xlab = "Time (days)", ylab = "Average temperature")
legend(1, 20, legend = c("Arctic", "Atlantic", "Continental", "Pacific"), lwd = 1, col = my_col, cex = 0.8)


my_col_2 <- my_col
my_col_2[4] <- my_col[2]
my_col_2[1] <- my_col[3]

plot(ft_s, col = my_col_2[factor(region)], lty = 1, xlab = "Time (days)", ylab = "Average temperature")
legend(1, 20, legend = c("Arctic or Continental", "Atlantic or Pacific"), 
       lwd = 1,
       col = my_col_2[c(1, 2, 3)],
       cex = 0.8)


# The mean function corresponding to a sample of curves stored in an fd-object can be computed with mean.fd
ft_mean <- mean.fd(ft_s)
plot(ft_s, col = 1, lty = 2, xlab = "Time (days)", ylab = "Average temperature")
plot(ft_mean, add = TRUE, col = 2, lwd = 3, lty = 1)



#Divide the stations into two groups ("Atlantic and Pacific" vs. "Continental and Arctic") and compute the mean and +-2 SD curves separately for the two groups.

g1 <- region %in% c("Atlantic", "Pacific")
g2 <- region %in% c("Continental", "Arctic")


ftg1 <- ft_s[g1]
ftg1_mean <- mean.fd(ftg1)
ftg1_sd <- sd.fd(ftg1)


ftg2 <- ft_s[g2]
ftg2_mean <- mean.fd(ftg2)
ftg2_sd <- sd.fd(ftg2)



plot(ftg1_mean, ylim = c(-25, 20), xlab = "Time (days)", ylab = "Mean temperature across stations")
plot(ftg2_mean, col = 2, add = TRUE)
legend(1, 20, legend = c("Atlantic and Pacific", "Continental and Arctic"), lwd = 1, col = c(1, 2), cex = 0.8)


plot(ftg1_sd, ylim = c(0, 10), xlab = "Time (days)", ylab = "SD of temperature across stations")
plot(ftg2_sd, col = 2, add = TRUE)
legend(1, 10, legend = c("Atlantic and Pacific", "Continental and Arctic"), lwd = 1, col = c(1, 2), cex = 0.8)





#################################################################################################
######### Data Preparation

# ap <- CanadianWeather$dailyAv[,,1][,g1]

# ca <- CanadianWeather$dailyAv[,,1][,g2]


###### Computing L_2 Distance which is needed to be used in depth functions to find the deepest object
# Dismatrixap = metric.lp(t(ap), lp = 2)
Dismatrixap2 <- metric.lp(fdata(ftg1), lp = 2)


# Dismatrixca = metric.lp(t(ca), lp = 2)
Dismatrixca2 <- metric.lp(fdata(ftg2), lp = 2)


#Difference in means for real observed data

ordap <- order(MOD3(Dismatrixap2),decreasing = TRUE)[1]
deepestap <- fdata(ftg1)[ordap]

ordca <- order(MOD3(Dismatrixca2),decreasing = TRUE)[1]
deepestca <- fdata(ftg2)[ordca]




# clean up
par(mar = c(5.1,4.1,5,5))


### Smoothed Data

plot(ft_s, col = my_col[factor(g1)], lty = 1, xlab = "Time (days)", ylab = "Average temperature")

plot(ft_s[(1:35)[g1][ordap]], add = TRUE,
     col = "black", lty = 1,lwd = 3,
     xlab = "Time (days)", ylab = "Average temperature")
plot(ft_s[(1:35)[g2][ordca]], col = "Blue", lwd = 3,add = TRUE,
     lty = 1, xlab = "Time (days)", ylab = "Average temperature")



#### Raw Data

# matplot(day.5, CanadianWeather$dailyAv[, , "Temperature.C"],
#         type="l", axes=FALSE, xlab="", ylab="Mean Temperature (deg C)",
#         col = my_col[factor(g1)])
# axis(2, las=1)

highlight_lines <- c((1:35)[g1][ordap], (1:35)[g2][ordca])
# 
# colors <- c("blue", "green") # Colors for highlighted lines
# line_types <- c(2, 4)      # Line types for highlighted lines (dashed and dotted)
# line_widths <- c(2, 3)     # Line widths for highlighted lines

# Use matlines to add the highlighted lines
# matlines(day.5, CanadianWeather$dailyAv[, , "Temperature.C"][, highlight_lines], 
#          col = colors,
#          lty = line_types,
#          lwd = line_widths)


# Label the horizontal axis with the month names
# axis(1, monthBegin.5, labels=FALSE)
# axis(1, monthEnd.5, labels=FALSE)
# axis(1, monthMid, monthLetters, tick=FALSE)

# Add the names of the weather stations
p  = c(colnames(CanadianWeather$dailyAv[, , "Temperature.C"][, highlight_lines]))
mtext(p, side=4,
      at=CanadianWeather$dailyAv[365, p, "Temperature.C"],
      las=1)

msddd = c()
for (j in 1:10) {
  msddd[j] = pvalue_canada_weather(1,1000,MSD)
  
}

pvalue_canada_weather <- function(lp_value, iter, depth_fun) {
  
  distribution=c()
  
  for (i in 1:iter) {
    
    fake_labels <- sample(c(rep("ap",20),rep("ca",15)), 35, replace = FALSE)
    # new_data <- CanadianWeather$dailyAv[,,1]
    # colnames(new_data) <- fake_labels
    
    ap_fake <- ft_s[fake_labels %in% c("ap")]
    
    ca_fake <- ft_s[fake_labels %in% c("ca")]
    
    
    ###### Computing L_2 Distance 
    Dismatrixap2 <- metric.lp(fdata(ap_fake), lp = lp_value)
    
    Dismatrixca2 <- metric.lp(fdata(ca_fake), lp = lp_value)
    
    
    #Difference in means
    
    ordap <- order(depth_fun(Dismatrixap2),decreasing = TRUE)[1]
    deepestap <- fdata(ap_fake)[ordap]
    
    ordca <- order(depth_fun(Dismatrixca2),decreasing = TRUE)[1]
    deepestca <- fdata(ca_fake)[ordca]
    
    
    distribution[i] <- metric.lp(deepestap,deepestca, lp = lp_value)
    
    
  }
  
  #Difference in means for real observed data
  
  ordap <- order(depth_fun(Dismatrixap2),decreasing = TRUE)[1]
  deepestap <- fdata(ftg1)[ordap]
  
  ordca <- order(depth_fun(Dismatrixca2),decreasing = TRUE)[1]
  deepestca <- fdata(ftg2)[ordca]
  
  observed <- metric.lp(deepestap,deepestca, lp = lp_value)
  
  
  pvalue <- sum(abs(distribution) >= abs(c(observed)))/(iter)
  
  return(pvalue)
  
}

start_time <- Sys.time()
set.seed(2222)


##### Parameters 

iter = 5000
lp_values <- c(1, 2, 3, 4, 5, 10, 20, 50)
model_names <- c("MOD3", "MOD2", "MHD", "MLD", "MSD")
models <- list(MOD3, MOD2, MHD, MLD, MSD)


combinations <- expand.grid(ModelName = model_names,
                            lpvalue = lp_values,
                            stringsAsFactors = FALSE)


# Apply the function for each combination and store the results in a data frame
results_df <- do.call(rbind, lapply(1:nrow(combinations), function(i) {
  model <- models[[which(model_names == combinations$ModelName[i])]]
  lp_val <- combinations$lpvalue[i]
  data.frame(Model = combinations$ModelName[i], lpvalue = lp_val, PValue = pvalue_canada_weather(lp_val, iter, model))
}))

# Print the final results
print(results_df)


end_time <- Sys.time()

running_time <- end_time-start_time

library(tidyr)

# Create the pivot table
pivot_table <- results_df %>%
  pivot_wider(names_from = Model, values_from = PValue)

# Print the pivot table
print(pivot_table)

library(fmsb)

# Prepare the data for radar chart
radar_data <- as.data.frame(t(pivot_table[-1]))
colnames(radar_data) <- pivot_table$lpvalue
radar_data <- rbind(rep(max(radar_data), ncol(radar_data)), rep(min(radar_data), ncol(radar_data)), radar_data)

# Plot the radar chart
radarchart(radar_data, axistype = 1,
           title = "Radar Chart of Models by PValue",
           pcol = rainbow(nrow(radar_data)-2), pfcol = rainbow(nrow(radar_data)-2, alpha=0.5), plwd = 2)
legend(x = 1.1, y = 1.1, legend = rownames(radar_data)[-c(1,2)], col = rainbow(nrow(radar_data)-2), lty = 1, lwd = 2)





hist(distribution, breaks=10, col='grey', main="Permutation Distribution", las=1, xlab='')
abline(v=observed, lwd=3, col="red")
